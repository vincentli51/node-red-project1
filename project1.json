[
    {
        "id": "f6ed19d4ee618a11",
        "type": "tab",
        "label": "Earthquake Tutorial",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a90a2a89c445690b",
        "type": "tab",
        "label": "Heating/Cooling Degree Days",
        "disabled": false,
        "info": "This flow calculates heating and cooling degree days from a weather API and displays them on a dashboard."
    },
    {
        "id": "c19ac05609a082c8",
        "type": "inject",
        "z": "f6ed19d4ee618a11",
        "name": "ms TimeStamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "06091e2a4b874545"
            ]
        ]
    },
    {
        "id": "70b7d8a74aaeb717",
        "type": "debug",
        "z": "f6ed19d4ee618a11",
        "name": "Date Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 100,
        "wires": []
    },
    {
        "id": "06091e2a4b874545",
        "type": "function",
        "z": "f6ed19d4ee618a11",
        "name": "dateToString",
        "func": "// Create a Date object from the payload\nvar date = new Date(msg.payload);\n// Change the payload to be a formatted Date string\nmsg.payload = date.toString();\n// Return the message so it can be sent on\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 100,
        "wires": [
            [
                "70b7d8a74aaeb717"
            ]
        ]
    },
    {
        "id": "060a5913b8f23f2e",
        "type": "inject",
        "z": "f6ed19d4ee618a11",
        "name": "Inject Earthquake Data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "4c048b35aa6f0a21"
            ]
        ]
    },
    {
        "id": "4c048b35aa6f0a21",
        "type": "http request",
        "z": "f6ed19d4ee618a11",
        "name": "Earthquake searcher",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.csv",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 380,
        "y": 280,
        "wires": [
            [
                "765d5bcaed82c2de"
            ]
        ]
    },
    {
        "id": "765d5bcaed82c2de",
        "type": "csv",
        "z": "f6ed19d4ee618a11",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 550,
        "y": 280,
        "wires": [
            [
                "5038612f5465e7ed",
                "0574805e9873ef2d"
            ]
        ]
    },
    {
        "id": "0574805e9873ef2d",
        "type": "debug",
        "z": "f6ed19d4ee618a11",
        "name": "mag output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.mag",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 280,
        "wires": []
    },
    {
        "id": "5038612f5465e7ed",
        "type": "switch",
        "z": "f6ed19d4ee618a11",
        "name": "Filter greater than 7",
        "property": "payload.mag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "7",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "e6f4716538958909"
            ]
        ]
    },
    {
        "id": "e6f4716538958909",
        "type": "change",
        "z": "f6ed19d4ee618a11",
        "name": "change payload to str",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "PANIC!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 340,
        "wires": [
            [
                "aa190c8d1a3d49bb"
            ]
        ]
    },
    {
        "id": "aa190c8d1a3d49bb",
        "type": "debug",
        "z": "f6ed19d4ee618a11",
        "name": "Display String",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 340,
        "wires": []
    },
    {
        "id": "4d10caad6e24da3b",
        "type": "function",
        "z": "f6ed19d4ee618a11",
        "name": "function 1",
        "func": "if (Array.isArray(msg.payload)) {\n    msg.payload = msg.payload.slice(0, 5);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "e9392e21b777a421",
        "type": "inject",
        "z": "a90a2a89c445690b",
        "name": "Trigger Daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "New York",
        "payloadType": "str",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "45d0a68d06c54784"
            ]
        ]
    },
    {
        "id": "45d0a68d06c54784",
        "type": "function",
        "z": "a90a2a89c445690b",
        "name": "Construct API URL",
        "func": "// Get the API key from the global context, which is set via a system environment variable.\n// This is a best practice to avoid hardcoding secrets in your code.\nconst apiKey = global.get('api_key');\n\n// Check if the API key is available\nif (!apiKey) {\n    node.error(\"API Key not found in global context. Please set the WEATHER_API_KEY environment variable.\");\n    return null; // Stop the flow if the key is missing\n}\n\nconst days = 3; // free tier provides 3 days of forecast\n\n// Get the city from the incoming message, defaulting to a specific city if not provided\nconst city = msg.payload || \"New York\";\n\n// Construct the URL for the API request for a 3-day forecast\nconst apiUrl = `http://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=${days}`;\n\n// Set the URL in the message and pass it on\nmsg.url = apiUrl;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "c099c27771f28b7e"
            ]
        ]
    },
    {
        "id": "c099c27771f28b7e",
        "type": "http request",
        "z": "a90a2a89c445690b",
        "name": "Get Weather Data",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 140,
        "wires": [
            [
                "b1b46a585721869e",
                "85b939d223edca5a"
            ]
        ]
    },
    {
        "id": "b1b46a585721869e",
        "type": "json",
        "z": "a90a2a89c445690b",
        "name": "Parse JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 840,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "85b939d223edca5a",
        "type": "debug",
        "z": "a90a2a89c445690b",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 260,
        "wires": []
    }
]